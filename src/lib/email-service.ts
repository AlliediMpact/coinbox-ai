// src/lib/email-service.ts
import nodemailer from 'nodemailer';

/**
 * Email service for sending verification emails, password resets, and notifications
 */
export const emailService = {
  /**
   * Send email verification link to a new user
   * @param email User's email address
   * @param fullName User's full name
   * @param verificationLink The verification link generated by Firebase Auth
   */
  async sendVerificationEmail(email: string, fullName: string, verificationLink: string) {
    const transporter = getTransporter();
    
    await transporter.sendMail({
      from: `"CoinBox Connect" <${process.env.EMAIL_FROM || 'noreply@coinboxconnect.com'}>`,
      to: email,
      subject: 'Verify Your Email Address',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #193281;">Welcome to CoinBox Connect, ${fullName}!</h2>
          <p>Please verify your email address by clicking the button below:</p>
          <a href="${verificationLink}" style="background-color: #193281; color: white; padding: 10px 20px; text-decoration: none; display: inline-block; margin: 20px 0; border-radius: 4px;">Verify Email</a>
          <p>If you didn't create an account, you can ignore this email.</p>
        </div>
      `,
    });
  },

  /**
   * Send password reset email
   * @param email User's email address
   * @param resetLink Password reset link generated by Firebase Auth
   */
  async sendPasswordResetEmail(email: string, resetLink: string) {
    const transporter = getTransporter();
    
    await transporter.sendMail({
      from: `"CoinBox Connect" <${process.env.EMAIL_FROM || 'noreply@coinboxconnect.com'}>`,
      to: email,
      subject: 'Reset Your Password',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #193281;">Reset Your Password</h2>
          <p>You requested a password reset. Click the button below to create a new password:</p>
          <a href="${resetLink}" style="background-color: #193281; color: white; padding: 10px 20px; text-decoration: none; display: inline-block; margin: 20px 0; border-radius: 4px;">Reset Password</a>
          <p>If you didn't request a password reset, you can ignore this email.</p>
        </div>
      `,
    });
  },

  /**
   * Send payment confirmation email
   * @param email User's email address
   * @param fullName User's full name
   * @param amount Payment amount
   * @param membershipTier Membership tier purchased
   * @param reference Payment reference
   */
  async sendPaymentConfirmation(email: string, fullName: string, amount: number, membershipTier: string, reference: string) {
    const transporter = getTransporter();
    
    await transporter.sendMail({
      from: `"CoinBox Connect" <${process.env.EMAIL_FROM || 'noreply@coinboxconnect.com'}>`,
      to: email,
      subject: 'Payment Confirmation',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #193281;">Payment Confirmation</h2>
          <p>Dear ${fullName},</p>
          <p>Thank you for your payment of R${amount.toFixed(2)} for the ${membershipTier} membership.</p>
          <p>Reference: ${reference}</p>
          <p>Your account has been activated. You can now access all features of your membership.</p>
        </div>
      `,
    });
  }
};

/**
 * Get configured nodemailer transporter
 * In development, uses ethereal.email for testing
 * In production, uses configured email provider
 */
function getTransporter() {
  // For production
  if (process.env.NODE_ENV === 'production' && 
      process.env.EMAIL_HOST && 
      process.env.EMAIL_USER && 
      process.env.EMAIL_PASSWORD) {
    return nodemailer.createTransport({
      host: process.env.EMAIL_HOST,
      port: parseInt(process.env.EMAIL_PORT || '587'),
      secure: process.env.EMAIL_SECURE === 'true',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASSWORD,
      },
    });
  } 
  
  // For development - use ethereal.email for testing
  // This creates a test account for development purposes
  // The emails can be viewed at https://ethereal.email
  return nodemailer.createTransport({
    host: 'smtp.ethereal.email',
    port: 587,
    secure: false,
    auth: {
      user: 'ethereal.user@ethereal.email', // will be auto-generated if not provided
      pass: 'ethereal.password', // will be auto-generated if not provided
    },
  });
}
